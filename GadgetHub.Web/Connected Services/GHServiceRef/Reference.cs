//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GadgetHub.Web.GHServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GHServiceRef.IGadgetHubService")]
    public interface IGadgetHubService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGadgetHubService/RegisterUser", ReplyAction="http://tempuri.org/IGadgetHubService/RegisterUserResponse")]
        bool RegisterUser(string firstName, string lastName, string phoneNumber, string username, string password, string email, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGadgetHubService/RegisterUser", ReplyAction="http://tempuri.org/IGadgetHubService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string firstName, string lastName, string phoneNumber, string username, string password, string email, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGadgetHubService/Login", ReplyAction="http://tempuri.org/IGadgetHubService/LoginResponse")]
        string Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGadgetHubService/Login", ReplyAction="http://tempuri.org/IGadgetHubService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGadgetHubServiceChannel : GadgetHub.Web.GHServiceRef.IGadgetHubService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GadgetHubServiceClient : System.ServiceModel.ClientBase<GadgetHub.Web.GHServiceRef.IGadgetHubService>, GadgetHub.Web.GHServiceRef.IGadgetHubService {
        
        public GadgetHubServiceClient() {
        }
        
        public GadgetHubServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GadgetHubServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GadgetHubServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GadgetHubServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterUser(string firstName, string lastName, string phoneNumber, string username, string password, string email, string role) {
            return base.Channel.RegisterUser(firstName, lastName, phoneNumber, username, password, email, role);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string firstName, string lastName, string phoneNumber, string username, string password, string email, string role) {
            return base.Channel.RegisterUserAsync(firstName, lastName, phoneNumber, username, password, email, role);
        }
        
        public string Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
    }
}
